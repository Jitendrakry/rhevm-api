
= Setting up HTTPS =

By default, rhevm-api uses HTTPS to ensure confidentiality on the
wire, as potentially sensitive information like passwords are sent
in plain text under HTTP Basic Authentication.


== Key Generation ==

First for testing purposes, generate a self-signed certificate in
the current directory (this may be replaced later with a cert that
has been properly signed by a fully-fledged certificate authority).

Unix:

  $ keytool -genkey -alias rhevm -keyalg RSA -keystore rhevm-keystore \
      -keypass password -storepass password

Windows:

  > keytool -genkey -alias rhevm -keyalg RSA -keystore rhevm-keystore ^
      -keypass password -storepass password

== Deployment Configuration ==

Next configure your favorite servlet container to enable HTTPS with the
previously generated kesytore.

JBoss:
------

If you have chosen to deploy the rhevm-api webapp to JBoss, edit
$JBOSS_HOME/server/default/deploy/jbossweb.sar/server.xml, replacing
the following lines:

      <!-- SSL/TLS Connector configuration using the admin devl guide keystore
      <Connector protocol="HTTP/1.1" SSLEnabled="true"
           port="8443" address="${jboss.bind.address}"
           scheme="https" secure="true" clientAuth="false"
           keystoreFile="${jboss.server.home.dir}/conf/chap8.keystore"
           keystorePass="rmi+ssl" sslProtocol = "TLS" />
      -->

with:

      <!-- SSL/TLS Connector configuration using our new keystore -->
      <Connector protocol="HTTP/1.1" SSLEnabled="true"
           port="8443" address="${jboss.bind.address}"
           scheme="https" secure="true" clientAuth="false"
           keystoreFile="${jboss.server.home.dir}/conf/rhevm-keystore"
           keystorePass="password" sslProtocol = "TLS" />

Copy the keystore generated earlier to $JBOSS_HOME/server/default/conf
or whatever other directory is convenient to reference from the configuration
above.

If you run into a problem whereby plain old HTTP is being served out from
the HTTPS port, it may be due to APR/OpenSSL being configured instead of
JSSE. In that case, you'll need to add the following attribute to the
Connector element given above:

               protocol="org.apache.coyote.http11.Http11Protocol"

Tomcat:
-------

If on the other hand, you have chosen to deploy on Apache Tomcat, then
similar changes are required in the $CATALINA_HOME/conf/server.xml,
replacing:

    <!--
    <Connector port="8443" maxHttpHeaderSize="8192"
               maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
               enableLookups="false" disableUploadTimeout="true"
               acceptCount="100" scheme="https" secure="true"
               clientAuth="false" sslProtocol="TLS" />
    -->

with:

    <Connector port="8443" maxHttpHeaderSize="8192"
               maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
               enableLookups="false" disableUploadTimeout="true"
               acceptCount="100" scheme="https" secure="true"
               keystoreFile="${catalina.home}/conf/rhevm-keystore"
               keystorePass="password"
               clientAuth="false" sslProtocol="TLS" />

Copy the keystore generated earlier to $CATALINA_HOME/conf or whatever
other directory is convenient to reference from the configuration above.

If you run into a problem whereby plain old HTTP is being served out from
the HTTPS port, it may be due to APR/OpenSSL being configured instead of
JSSE. In that case, you'll need to add the following attribute to the
Connector element given above:

               protocol="org.apache.coyote.http11.Http11Protocol"


== Client Configuration ==

You may or may not need any prior configuration of your HTTPS-capable
client, depending on its policy with respect to trusting server-side
certificates.

For example, the python test client will implicitly trust any
server-side certificate when run with the --encrypt option.
Or the wget utility supports a --no-check-certificate option
to allow a self-signed certificate be considered acceptable.
Alternatively, browsers often provide the capability to set up a
security exception on the fly, so that you can assign trust to the
rhevm-api certificate when it is first encountered by the client.

On the other hand, if your client requires trust to be established
a priori, you will need to export the certificate and import it into
a truststore.

Unix:

  $ keytool -export -alias rhevm -file rhevm.cer \
      -keystore rhevm-keystore -storepass password

  $ keytool -import -v -trustcacerts -noprompt -alias rhevm -keypass password \
      -file rhevm.cer -keystore rhevm-truststore -storepass password

Windows:

  > keytool -export -alias rhevm -file rhevm.cer ^
      -keystore rhevm-keystore -storepass password

  > keytool -import -v -trustcacerts -noprompt -alias rhevm -keypass password ^
      -file rhevm.cer -keystore rhevm-truststore -storepass password

