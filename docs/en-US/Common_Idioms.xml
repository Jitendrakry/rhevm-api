<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "REST_API_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter id="chap-REST_API_Guide-Common_Idioms">
  <title>Common Idioms For All Resource</title>
  <para>
    Resources are represented by XML documents e.g.
    </para>

  <screen>
&lt;resource id="d9a0e106-9273-4812-bb05-ed75fe1ac652" href="resources/d9a0e106-9273-4812-bb05-ed75fe1ac652"&gt;
  &lt;name&gt;foo&lt;/name&gt;
  &lt;description&gt;This is the foo resource&lt;/description&gt;
&lt;/resource&gt;
  </screen>

  <para>
    The following attributes are common to all resource descriptions:

    <informaltable frame="none">
      <tgroup cols="2">
        <colspec colwidth="2*"/>
        <colspec colwidth="5*"/>
        <tbody>
          <row>
            <entry><literal>id</literal></entry>
            <entry>An opaque server-generated identifier for the resource which is guaranteed to be unique across all resources in this RHEV-M instance</entry>
          </row>
          <row>
            <entry><literal>href</literal></entry>
            <entry>The canonical location of the resource</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    and the common elements:

    <informaltable frame="none">
      <tgroup cols="2">
        <colspec colwidth="2*"/>
        <colspec colwidth="5*"/>
        <tbody>
          <row>
            <entry><literal>name</literal></entry>
            <entry>A user-supplied human readable name for the resource which also must be unique across all resources</entry>
          </row>
          <row>
            <entry><literal>description</literal></entry>
            <entry>A free-form user-supplied human readable description of the resource</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

  </para>

  <section id="sect-REST_API_Guide-Common_Idioms-Listing_Resources">
    <title>
      Listing Resources
    </title>

    <para>
      A listing of the resources in a collection is obtained by issuing a <literal>GET</literal> request on the collection URI obtained from the entry point.
    </para>

    <screen>
GET /resources/ HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;resources&gt;
  &lt;resource id="{id}" href="resources/{id}"&gt;
    &lt;name&gt;foo&lt;/name&gt;
    &lt;description&gt;The Foo Resource&lt;/description&gt;
    ...
  &lt;/resource&gt;
  &lt;resource ...&gt;
    ...
  &lt;/resource&gt;
&lt;/resources&gt;
    </screen>

  </section>

  <section id="sect-REST_API_Guide-Common_Idioms-Querying_Collections">
    <title>
      Querying a Collection
    </title>

    <para>
      A collection may be queried using a <literal>GET</literal> request on an appropropriate <literal>"collection/search"</literal> URI template, instanitated with a query constraint expressed in the RHEV-M query language. Only those resources in the collection satisfying the constraint will be returned.
    </para>

    <screen>
GET /resources?search={query} HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;resources&gt;
  &lt;resource id="{id}" href="resources/{id}"&gt;
    ...
  &lt;/resource&gt;
  ...
&lt;/resources&gt;
    </screen>

  </section>

  <section id="sect-REST_API_Guide-Common_Idioms-Retrieving_Resources">
    <title>
      Retrieving a Resource
    </title>

    <para>
      The state of a resource can be retrieved using <literal>GET</literal> request on a URI obtained from the listing above.
    </para>

    <screen>
GET /resources/{id} HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;resource id="{id}" href="resources/{id}"&gt;
  ...
&lt;/resource&gt;
    </screen>

  </section>

  <section id="sect-REST_API_Guide-Common_Idioms-Creating_Resources">
    <title>
      Creating a Resource
    </title>

    <para>
      A new resource may be created by issueing a <literal>POST</literal> request to collection URI containing a representation of the new resource.
    </para>

    <para>
      Each resource type has its own specific required properties which the client must supply when creating a new resource. Refer to the indiviual resource type documentation for more details.
    </para>

    <screen>
POST /resources HTTP/1.1
Accept: application/xml
Content-Type: application/xml

&lt;resource&gt;
  &lt;name&gt;foo&lt;/name&gt;
&lt;/resource&gt;

HTTP/1.1 201 Created
Location: http://{host}/resources/1234-abcd-6789-ef00
Content-Type: application/xml

&lt;resource id="1234-abcd-6789-ef00" href="resources/1234-abcd-6789-ef00"&gt;
  &lt;name&gt;foo&lt;/name&gt;
  ...
&lt;/resource&gt;
    </screen>

    <para>
      The <literal>Location</literal> header in the response gives the URI from which the resource may be queried. The response body can contain a complete representation, partial representation or no representation of the resource, so clients should rely only on fetching the representation via the URI in the response header.
    </para>

  </section>

  <section id="sect-REST_API_Guide-Common_Idioms-Updating_Resources">
    <title>
      Updating a Resource
    </title>

    <para>
      Some resource properties can be modified by <literal>PUT</literal>ing an updated description to the resource URI. Details on which properties are modifiable can be found in the individual resource type documentation.
    </para>

    <screen>
PUT /resources/{id} HTTP/1.1
Accept: application/xml
Content-Type: application/xml

&lt;resource&gt;
  &lt;name&gt;foo&lt;/name&gt;
&lt;/resource&gt;

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;resource id="..." href="..."&gt;
  &lt;name&gt;foo&lt;/name&gt;
  ...
&lt;/resource&gt;
    </screen>

    <para>
      Again, the server may or may not return the updated resource description in the response body.
    </para>

    <para>
      If an attempt is made to modify a <italics>strictly<italics> immutable resource property, this is reported as <literal>409 Conflict<literal> error with a <literal>Fault</literal> representation in the response body. Other non-modifiable properties specified in the request entity-body may be silently ignored.
    </para>

  </section>

  <section id="sect-REST_API_Guide-Common_Idioms-Deleting_Resources">
    <title>
      Deleting a Resource
    </title>

    <para>
      A resource is deleted by issuing a <literal>DELETE</literal> request to its URI.
    </para>

    <screen>
DELETE /resources/{id} HTTP/1.1

HTTP/1.1 204 No Content
    </screen>

  </section>

  <section id="sect-REST_API_Guide-Common_Idioms-Actions">
    <title>
      Actions
    </title>

    <para>
      Each resource description includes a list of action links describing operations which may be invoked on the resource.
    </para>

    <screen>
&lt;resource&gt;
  ...
  &lt;actions&gt;
    &lt;link rel="frob" href="resources/{id}/frob"/&gt;
    &lt;link rel="twiddle" href="resources/{id}/twiddle/"/&gt;
    ...
  &lt;/actions&gt;
  ...
&lt;/resource&gt;
    </screen>

    <para>
      An action may be invoked by <literal>POST</literal>ing to the supplied URI. The body of the POST must contain an <literal>Action</literal> representation encapsulating common and/or task-specific parameters. Common action parameters include:

      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="2*"/>
          <colspec colwidth="5*"/>
          <tbody>
            <row>
              <entry><literal>async</literal></entry>
              <entry>true if the server should respond immediately with <literal>202 Accepted</literal> and an action representation containing a <literal>href</literal> link which may be polled for completion.</entry>
            </row>
            <row>
              <entry><literal>grace_period</literal></entry>
              <entry>a grace period in milliseconds, which must expire before the action is initiated.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      Individual actions and their parameters are documented in the individual resource type's documentation.
    </para>


    <para>
      When the action is initiated asychronously, the immediate <literal>202 Accepted</literal> response provides a link that may be polled to monitor the status of the task:
    </para>

    <screen>
POST /resources/{id}/{verb} HTTP/1.1
Content-Type: application/xml
Accept: application/xml

&lt;action&gt;
  &lt;async&gt;true&lt;/async&gt;
&lt;/action&gt;

HTTP/1.1 202 Accept
Content-Type: application/xml

&lt;action id="{action_id}" href="/resources/{id}/{verb}/{action_id}"&gt;
  &lt;async&gt;true&lt;/async&gt;
  ...
&lt;action&gt;
    <screen>

    <para>
      A subsequent <literal>GET</literal> on the action URI provides an indication of the status of the asynchronous task:

      <informaltable frame="none">
        <tgroup cols="2">
          <colspec colwidth="2*"/>
          <colspec colwidth="5*"/>
          <tbody>
            <row>
              <entry><literal>PENDING</literal></entry>
              <entry>task has not yet started.</entry>
            </row>
            <row>
              <entry><literal>IN_PROGRESS</literal></entry>
              <entry>task is in flight.</entry>
            </row>
            <row>
              <entry><literal>COMPLETE</literal></entry>
              <entry>task has completed successfully.</entry>
            </row>
            <row>
              <entry><literal>FAILED</literal></entry>
              <entry>task has failed, in which case the returned <literal>Action</literal> representation would contain a <literal>Fault</literal> describing the failure.</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>

      Once the task has completed, the Action is retained for an interminate period. Once this has expired, subsequent <literal>GET</literal>s are <literal>301 Moved Permanently</literal> redirected back to the target resource.
    </para>

    <screen>
GET /resources/{id}/{verb}/{action_id} HTTP/1.1
Accept: application/xml

HTTP/1.1 200 OK
Content-Type: application/xml

&lt;action id="{action_id}" href="/resources/{id}/{verb}/{action_id}"&gt;
  &lt;status&gt;{PENDING|IN_PROGRESS|COMPLETE|FAILED}&lt;/status&gt;
&lt;action&gt;
    </screen>

  </section>

</chapter>
